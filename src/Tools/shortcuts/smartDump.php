<?php
/**
 * This file is part of LeonardoCA\Tools for Nette Framework
 * Copyright (c) 2012 Leonard Odložilík
 * For the full copyright and license information,
 * please view the file license.txt that was distributed with this source code.
 */
use Nette\Utils\Html;
use LeonardoCA\Tools\SmartDump;
use Tracy\Debugger;

/**
 * LeonardoCA\Tools\SmartDump shortcut.
 * - you can optionally set $maxDepth, $maxLen
 * - this parameters will be used just for single dump and than returned to previous values
 *
 * @param mixed|array $arg Any variable or array of variables
 * @param string      $title
 * @param int|number  $maxDepth
 * @param int|number  $maxLen
 * @param bool|string $showLocation
 * @return void
 */
function sdump(
	$arg = 'called without argument',
	$title = '',
	$maxDepth = 4,
	$maxLen = 200,
	$showLocation = true
) {
	if (!Debugger::$productionMode) {
		$maxDepthBackup = Debugger::$maxDepth;
		$maxLenBackup = Debugger::$maxLen;
		$showLocationBackup = Debugger::$showLocation;
		Debugger::$maxDepth = $maxDepth;
		Debugger::$maxLen = $maxLen;
		Debugger::$showLocation = $showLocation;
		SmartDump::sdump($arg, $title);
		Debugger::$maxDepth = $maxDepthBackup;
		Debugger::$maxLen = $maxLenBackup;
		Debugger::$showLocation = $showLocationBackup;
	}
}

/**
 * Start catching output
 */
function bs()
{
	ob_start();
}

/**
 * End catching output and send it to Dump Panel
 *
 * @param string $title
 */
function be($title = 'be')
{
	$out = ob_get_clean();
	SmartDump::addToDumpPanel(array($title => $out));
}

/**
 * Dump rendered Html element or code and intended output generated by tidy and optional also Html element structure
 *
 * @param Html|string $htmlElement        Html element or string
 * @param bool        $onlyReturn         output in string and don't send it to output?
 * @param int         $maxDepth           for Debugger::Dump output - to see how is the Html element built
 * @param bool        $includePrettyPrint along javascript code for prettyPrint activation?
 * @return string     Html output
 */
function dumpHtml(
	$htmlElement, $onlyReturn = false, $maxDepth = 0,
	$includePrettyPrint = false
) {
	$maxDepthBackup = Debugger::$maxDepth;
	$maxLenBackup = Debugger::$maxLen;
	$showLocationBackup = Debugger::$showLocation;
	Debugger::$maxDepth = $maxDepth;
	Debugger::$maxLen = 200000;
	Debugger::$showLocation = false;

	// convert to string only once - important for Scaffolding Renderer output
	$renderedElement = (string)$htmlElement;
	$output = '<div class="rendered-element">' . $renderedElement . '</div>';
	$output .= '<pre class="prettyprint linenums pre-scrollable">'
		. htmlspecialchars(tidyFormatString($renderedElement)) . '</pre>';
	if ($includePrettyPrint) {
		$output .= '';
	}
	if (($maxDepth > 0) && ($htmlElement instanceof \Latte\Runtime\Html)) {
		Debugger::dump($renderedElement);
		Debugger::dump($htmlElement);
	}
	Debugger::$maxDepth = $maxDepthBackup;
	Debugger::$maxLen = $maxLenBackup;
	Debugger::$showLocation = $showLocationBackup;
	if (!$onlyReturn) {
		echo $output;
	}
	return $output;
}

/**
 * Formats Html string to readable output
 * options are set in a way so tidy should not fix anything - because this function is intended to be used for debugging
 *
 * @param string       $string      String which needs formatting
 * @param array|string $tidy_config Optional configuration parameters
 * @return string   Tidy formatted string
 */
function tidyFormatString($string, $tidy_config = '')
{
	$config = array(
		'show-body-only' => true,
		'clean' => false,
		'char-encoding' => 'utf8',
		'add-xml-decl' => true,
		'add-xml-space' => true,
		'output-html' => false,
		'output-xml' => false,
		'output-xhtml' => true,
		'numeric-entities' => false,
		'ascii-chars' => false,
		'doctype' => 'strict',
		'bare' => true,
		'fix-uri' => false,
		'indent' => true,
		'indent-spaces' => 4,
		'tab-size' => 4,
		'wrap-attributes' => false,
		'wrap' => 0,
		'indent-attributes' => false,
		'join-classes' => false,
		'join-styles' => false,
		'enclose-block-text' => false,
		'fix-bad-comments' => false,
		'fix-backslash' => false,
		'replace-color' => false,
		'wrap-asp' => false,
		'wrap-jste' => false,
		'wrap-php' => false,
		'write-back' => false,
		'drop-proprietary-attributes' => false,
		'hide-comments' => false,
		'hide-endtags' => false,
		'literal-attributes' => false,
		'drop-empty-paras' => false,
		'enclose-text' => false,
		'quote-ampersand' => false,
		'quote-marks' => false,
		'quote-nbsp' => false,
		'vertical-space' => false,
		'wrap-script-literals' => false,
		'tidy-mark' => false,
		'merge-divs' => false,
		'repeated-attributes' => 'keep-last',
		'break-before-br' => false,
		'preserve-entities' => true,
		'force-output' => true,
		'quiet' => true,
		'output-bom' => false,
		'new-empty-tags' => 'li'
	);
	if ($tidy_config == '') {
		$tidy_config = &$config;
	}
	$tidy = new tidy();
	$tidy->parseString($string, $tidy_config);
	$out = (string )$tidy;
	unset($tidy);
	unset($tidy_config);
	return $out;
}

function shadowDomTemplate($title, $content, $moreStyles = '')
{
	return sprintf(
		'
		<div id="htmlDump">HtmlDump</div>
		<template id="htmlDumpTemplate">
		<style>
		.outer {
			margin: 0;
			border: 5px solid #aba;
			border-radius: 10px;
			background: #cdc;
			width: 500px;
			text-align: left;
		}
		.boilerplate {
			font-size: 18px;
			font-weight: bold;
			color: #2f5c43;
			font-family: sans-serif;
			padding: 5px 10px;
		}
		.htmlContent {
			padding: 0;
			color: #223;
			background: #efe;
			font-family: "Marker Felt", cursive;
			font-size: 12px;
		}
		</style>
		%s
		<div class="outer">
		  <div id="title" class="boilerplate">%s</div>
		  <div id="content" class="htmlContent">%s</div>
		</div>
		</template>
		<script>
		var shadow = document.querySelector("#htmlDump").webkitCreateShadowRoot();
		var template = document.querySelector("#htmlDumpTemplate");
		shadow.appendChild(template.content);
		template.remove();
		prettyPrint();
		</script>
		',
		$moreStyles,
		$title,
		$content
	);
}

function prettyPrintStyle()
{
	return '
<style>
    li.L0, li.L1, li.L2, li.L3, li.L5, li.L6, li.L7, li.L8 {list-style-type: inherit;}
    pre.prettyprint{
    border: 0 solid #e4d482;
}
.prettyprint.linenums {
/* box-shadow: 32px 0 0 #e89995 inset, 34px 0 0 #e86d6d inset; */
}
pre{
color: #163b38;
background-color: #cdc;
border: 0 solid #71e46f;
padding: 10px;
margin: 0;
font-family: Consolas,Menlo,Monaco,Lucida Console,Courier New,monospace,serif;
max-height: 700px;
overflow: hidden;
width: auto;
text-wrap: normal;
/* padding-left: 43px;*/
}
ol.linenums {
margin: 0 0 0 30px;
width: auto;
}
ol.linenums li {
color: #218d41;
line-height: 20px;
padding-left: 6px;
text-shadow: 0 1px 0 #9eca78;
width: auto;
}
</style>
';
}
